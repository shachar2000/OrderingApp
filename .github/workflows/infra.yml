name: Infrastructures Deployment

on:
  push:
    branches:
      - main

jobs:
  InfraDeployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Install TF
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          terraform -v

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id "${{secrets.AWS_ACCESS_KEY_ID}}"
          aws configure set aws_secret_access_key "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          aws configure set region "${{secrets.AWS_SECRET_REGION}}"


      - name: Create tfvars file
        run: |
          cd tf
          printf "%s" "${{ secrets.TFVARS_SECRET }}" > region.eu-north-1.tfvars
          db_name=$(grep 'db_name' region.eu-north-1.tfvars | awk -F ' = ' '{print $2}' | sed 's/"//g')
          db_username=$(grep 'db_username' region.eu-north-1.tfvars | awk -F ' = ' '{print $2}' | sed 's/"//g')
          db_password=$(grep 'db_password' region.eu-north-1.tfvars | awk -F ' = ' '{print $2}' | sed 's/"//g')
          secret_key="${{ secrets.SECRET_KEY }}"
          echo "::add-mask::$db_name"
          echo "::add-mask::$db_username"
          echo "::add-mask::$db_password"
          echo "secret_key=$secret_key" >> $GITHUB_ENV
          echo "db_name=$db_name" >> $GITHUB_ENV
          echo "db_username=$db_username" >> $GITHUB_ENV
          echo "db_password=$db_password" >> $GITHUB_ENV

      - name: Create Infrastructures
        run: |
          cd tf
          terraform init
          terraform apply -var-file region.eu-north-1.tfvars -auto-approve
          OrderAppServer1_ip=$(terraform output -raw OrderAppServer1_public_ip)
          OrderAppServer2_ip=$(terraform output -raw OrderAppServer2_public_ip)
          prometheus_grafana_instance_ip=$(terraform output -raw prometheus_grafana_instance_ip)
          RdsEndpoint=$(terraform output -raw rds_endpoint)
          RdsEndpoint=$(echo $RdsEndpoint | sed 's/:.*//')
          echo "::add-mask::$OrderAppServer1_ip"
          echo "::add-mask::$OrderAppServer2_ip"
          echo "::add-mask::$prometheus_grafana_instance_ip"
          echo "::add-mask::$RdsEndpoint"
          echo "OrderAppServer1_ip=$OrderAppServer1_ip" >> $GITHUB_ENV
          echo "OrderAppServer2_ip=$OrderAppServer2_ip" >> $GITHUB_ENV
          echo "prometheus_grafana_instance_ip=$prometheus_grafana_instance_ip" >> $GITHUB_ENV
          echo "RdsEndpoint=$RdsEndpoint" >> $GITHUB_ENV

      - name: Create inventory file from output
        run: |
          cd ansible
          touch inventory.txt
          echo "[OrderAppServer]" > inventory.txt
          echo "OrderAppServer1 ansible_host=$OrderAppServer1_ip ansible_user=ubuntu" >> inventory.txt
          echo "OrderAppServer2 ansible_host=$OrderAppServer2_ip ansible_user=ubuntu" >> inventory.txt

      - name: Install Ansible
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible -y
          ansible --version

      - name: Run Ansible Playbook
        run: |
          cd ansible
          echo "${{secrets.KEY_PEM}}" > ServerKeyPair.pem
          sudo chmod 400 ServerKeyPair.pem
          ssh -o StrictHostKeyChecking=no -i ServerKeyPair.pem ubuntu@$OrderAppServer1_ip "whoami"
          ssh -o StrictHostKeyChecking=no -i ServerKeyPair.pem ubuntu@$OrderAppServer2_ip "whoami"
          ansible-playbook -i inventory.txt --private-key ServerKeyPair.pem playbook.yml

      - name: Replace IPs in prometheus.yml
        run: |
          cd prometheus-grafana
          sed -i "s/node-exporter-1.*/node-exporter-1\n    static_configs:\n      - targets: ['$OrderAppServer1_ip:9200']/" prometheus.yml
          sed -i "s/node-exporter-2.*/node-exporter-2\n    static_configs:\n      - targets: ['$OrderAppServer2_ip:9200']/" prometheus.yml
          sed -i "s/orderapp-server.*/orderapp-server\n    static_configs:\n      - targets: ['$OrderAppServer1_ip:3000', '$OrderAppServer2_ip:3000']/" prometheus.yml

      - name: Create directory and copy docker-compose.yml to Prometheus-Grafana EC2
        run: |
          cd prometheus-grafana
          ssh -o StrictHostKeyChecking=no -i ../ansible/ServerKeyPair.pem ubuntu@$prometheus_grafana_instance_ip "mkdir -p /home/ubuntu/prometheus-grafana"
          scp -o StrictHostKeyChecking=no -i ../ansible/ServerKeyPair.pem docker-compose.yml ubuntu@$prometheus_grafana_instance_ip:/home/ubuntu/prometheus-grafana/
          scp -o StrictHostKeyChecking=no -i ../ansible/ServerKeyPair.pem prometheus.yml ubuntu@$prometheus_grafana_instance_ip:/home/ubuntu/prometheus-grafana/

      
      - name: Run Docker Compose on Prometheus-Grafana EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ansible/ServerKeyPair.pem ubuntu@$prometheus_grafana_instance_ip "\
          cd /home/ubuntu/prometheus-grafana && \
          docker-compose up -d"






